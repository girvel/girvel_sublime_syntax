%YAML 1.2
---
file_extensions:
  - grv
scope: source.girvel
contexts:
  main:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    - match: '"'
      scope: punctuation.definition.string.begin.girvel
      push: double_quoted_string

    # Comments begin with a '//' and finish at the end of the line
    - match: '//'
      scope: punctuation.definition.comment.girvel
      push: line_comment

    - match: '(::|<|>|\.)'
      scope: punctuation.accessor.girvel

    - match: ';|,'
      scope: punctuation.separator.girvel

    - match: '{'
      scope: punctuation.section.block.begin.girvel

    - match: '}'
      scope: punctuation.section.block.end.girvel

    - match: '\('
      scope: punctuation.section.parens.begin.girvel

    - match: '\)'
      scope: punctuation.section.parens.end.girvel

    - match: '\b(if|else|loop)\b'
      scope: keyword.control.girvel

    - match: '\b(include|generic)\b'
      scope: keyword.control.import.girvel

    - match: '\b(let|struct)\b|=>'
      scope: keyword.declaration.girvel

    - match: '\b(mut)\b'
      scope: storage.modifier.girvel

    - match: '(:|=)'
      scope: keyword.operator.assignment.girvel

    - match: '(&|*)'
      scope: keyword.operator.girvel

    - match: '\b([A-Z][\w\d_]*)\b'
      scope: entity.name.struct.girvel

    - match: '\b([A-Z]|T[\w\d_]+)\b'
      scope: entity.name.interface.girvel

    - match: '\b(printf|scanf)\b'
      scope: entity.name.function.girvel

    - match: '\b((-)?[0-9]+(\.?[0-9]*))'
      scope: constant.numeric.girvel

    - match: '\b(i8|i16|i32|i64|u8|u16|u32|u64|float|bool|char)\b'
      scope: storage.type.girvel

    - match: "'.'"
      scope: constant.numeric.girvel

  double_quoted_string:
    - meta_scope: string.quoted.double.girvel
    - match: '\\.'
      scope: constant.character.escape.girvel
    - match: |-
        (?x)%
          (\d+\$)?                                      # field (argument #)
          [#0\- +']*                                    # flags
          [,;:_]?                                       # separator character (AltiVec)
          ((-?\d+)|\*(-?\d+\$)?)?                       # minimum field width
          (\.((-?\d+)|\*(-?\d+\$)?)?)?                  # precision
          (hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)?          # length modifier
          (\[[^\]]+\]|[am]s|[diouxXDOUeEfFgGaACcSspn%]) # conversion type
      scope: constant.other.placeholder.c
    - match: '"'
      scope: punctuation.definition.string.end.girvel
      pop: true

  line_comment:
    - meta_scope: comment.line.girvel
    - match: $
      pop: true
